// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "InitConfig.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

InitConfig::InitConfig(): InstantCommand() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called once when this command runs
void InitConfig::Initialize() {

	// Each parameter is checked to see if it just has the default.  If so it will set to default vales

	// Parameters for the shooter
	float IndexerRPM = Preferences::GetInstance()->GetFloat("Indexer::RPM", -1.0);
	if (IndexerRPM == -1.0) Preferences::GetInstance()->PutFloat("Indexer::RPM",500);

	bool IndexerDirReversed = Preferences::GetInstance()->GetBoolean("Indexer::DirReversed", false);
	if (IndexerDirReversed == true) Preferences::GetInstance()->PutBoolean("Indexer::DirReversed",false);

	bool IndexerSensorReversed = Preferences::GetInstance()->GetBoolean("Indexer::SensorReversed", false);
	if (IndexerSensorReversed == true) Preferences::GetInstance()->PutBoolean("Indexer::SensorReversed",false);

	double IndexerP = Preferences::GetInstance()->GetDouble("Indexer::P", -500.0);
	if (IndexerP == -500.0) Preferences::GetInstance()->PutDouble("Indexer::P",0.1);

	double IndexerI = Preferences::GetInstance()->GetDouble("Indexer::I", -500.0);
	if (IndexerI == -500.0) Preferences::GetInstance()->PutDouble("Indexer::I",0.0);

	double IndexerD = Preferences::GetInstance()->GetDouble("Indexer::D", -500.0);
	if (IndexerD == -500.0) Preferences::GetInstance()->PutDouble("Indexer::D",0.0);

	int IndexerEncoderPulses = Preferences::GetInstance()->GetInt("Indexer::EncoderPulses", -500);
	if (IndexerEncoderPulses == -500) Preferences::GetInstance()->PutInt("Indexer::EncoderPulses",4096);

	int IndexerACLE = Preferences::GetInstance()->GetInt("Indexer::AllowableCLerr", -500);
	if (IndexerACLE == -500) Preferences::GetInstance()->PutInt("Indexer::AllowableCLerr",5);

	double IndexerCLRamp = Preferences::GetInstance()->GetDouble("Indexer::CLRamp", -500.0);
	if (IndexerCLRamp == -500.0) Preferences::GetInstance()->PutDouble("Indexer::CLRamp",12.0);

	float ShooterRPM = Preferences::GetInstance()->GetFloat("Shooter::RPM", -10.0);
	if (ShooterRPM == -10.0) Preferences::GetInstance()->PutFloat("Shooter::RPM",3500);

	bool ShooterDirRev = Preferences::GetInstance()->GetBoolean("Shooter::DirReversed", false);
	if (ShooterDirRev == true) Preferences::GetInstance()->PutBoolean("Shooter::DirReversed",false);

	bool ShooterSensorRev = Preferences::GetInstance()->GetBoolean("Shooter::SensorReversed", false);
	if (ShooterSensorRev == true) Preferences::GetInstance()->PutBoolean("Shooter::SensorReversed",false);

	double ShooterP = Preferences::GetInstance()->GetDouble("Shooter::P", -500.0);
	if (ShooterP == -500.0) Preferences::GetInstance()->PutDouble("Shooter::P",0.015);

	double ShooterI = Preferences::GetInstance()->GetDouble("Shooter::I", -500.0);
	if (ShooterI == -500.0) Preferences::GetInstance()->PutDouble("Shooter::I",0.0);

    double ShooterD = Preferences::GetInstance()->GetDouble("Shooter::D", -500.0);
	if (ShooterD == -500.0) Preferences::GetInstance()->PutDouble("Shooter::D",0.3);

	int ShooterEncP = Preferences::GetInstance()->GetInt("Shooter::EncoderPulses", -500);
	if (ShooterEncP == -500) Preferences::GetInstance()->PutInt("Shooter::EncoderPulses",4096);

	int ShooterACLE = Preferences::GetInstance()->GetInt("Shooter::AllowableCLerr", -500);
	if (ShooterACLE == -500) Preferences::GetInstance()->PutInt("Shooter::AllowableCLerr",5);

	double ShooterCLRamp = Preferences::GetInstance()->GetDouble("Shooter::CLRamp", -500.0);
	if (ShooterCLRamp == -500.0) Preferences::GetInstance()->PutDouble("Shooter::CLRamp",12.0);

	// Parameters for auto1 - Left Peg
	float AutoLeftPeg_Step1_MoveTimeout = Preferences::GetInstance()->GetFloat("AutoLeftPeg::Step1_MoveTimeout", -1.0);
	if (AutoLeftPeg_Step1_MoveTimeout == -1.0) Preferences::GetInstance()->PutFloat("AutoLeftPeg::Step1_MoveTimeout", 2.075);

	float AutoLeftPeg_Step1_Output = Preferences::GetInstance()->GetFloat("AutoLeftPeg::Step1_Output", -10.0);
	if (AutoLeftPeg_Step1_Output == -10.0) Preferences::GetInstance()->PutFloat("AutoLeftPeg::Step1_Output", 0.6);

	float AutoLeftPeg_Step2_Rotate = Preferences::GetInstance()->GetFloat("AutoLeftPeg::Step2_Rotate", -500.0);
	if (AutoLeftPeg_Step2_Rotate == -500.0) Preferences::GetInstance()->PutFloat("AutoLeftPeg::Step2_Rotate", 56.0);

	float AutoLeftPeg_Step3_MoveTimeout = Preferences::GetInstance()->GetFloat("AutoLeftPeg::Step3_MoveTimeout", -1.0);
	if (AutoLeftPeg_Step3_MoveTimeout == -1.0) Preferences::GetInstance()->PutFloat("AutoLeftPeg::Step3_MoveTimeout", 1.25);

	float AutoLeftPeg_Step3_Output = Preferences::GetInstance()->GetFloat("AutoLeftPeg::Step3_Output", -10.0);
	if (AutoLeftPeg_Step3_Output == -10.0) Preferences::GetInstance()->PutFloat("AutoLeftPeg::Step3_Output", 0.6);

	double AutoLeftPeg_Step5_Delay = Preferences::GetInstance()->GetDouble("AutoLeftPeg::Step5_Delay", -500.0);
	if (AutoLeftPeg_Step5_Delay == -500.0) Preferences::GetInstance()->PutDouble("AutoLeftPeg::Step5_Delay", 0.5);

	float AutoLeftPeg_Step6_MoveTimeout = Preferences::GetInstance()->GetFloat("AutoLeftPeg::Step6_MoveTimeout", -1.0);
	if (AutoLeftPeg_Step6_MoveTimeout == -1.0) Preferences::GetInstance()->PutFloat("AutoLeftPeg::Step6_MoveTimeout", 2.0);

	float AutoLeftPeg_Step6_Output = Preferences::GetInstance()->GetFloat("AutoLeftPeg::Step6_Output", -500.0);
	if (AutoLeftPeg_Step6_Output == -500.0) Preferences::GetInstance()->PutFloat("AutoLeftPeg::Step6_Output", -0.3);

    // Parameters for auto2 - Middle Peg
	float AutoMiddlePeg_Step1_MoveTimeout = Preferences::GetInstance()->GetFloat("AutoMiddlePeg::Step1_MoveTimeout", -1.0);
	if (AutoMiddlePeg_Step1_MoveTimeout == -1.0) Preferences::GetInstance()->PutFloat("AutoMiddlePeg::Step1_MoveTimeout", 2.0);

	float AutoMiddlePeg_Step1_Output = Preferences::GetInstance()->GetFloat("AutoMiddlePeg::Step1_Output", -10.0);
	if (AutoMiddlePeg_Step1_Output == -10.0) Preferences::GetInstance()->PutFloat("AutoMiddlePeg::Step1_Output", 0.55);

	float AutoMiddlePeg_Step2_MoveTimeout = Preferences::GetInstance()->GetFloat("AutoMiddlePeg::Step2_MoveTimeout", -1.0);
	if (AutoMiddlePeg_Step2_MoveTimeout == -1.0) Preferences::GetInstance()->PutFloat("AutoMiddlePeg::Step2_MoveTimeout", 0.5);

	float AutoMiddlePeg_Step2_Output = Preferences::GetInstance()->GetFloat("AutoMiddlePeg::Step2_Output", -10.0);
	if (AutoMiddlePeg_Step2_Output == -10.0) Preferences::GetInstance()->PutFloat("AutoMiddlePeg::Step2_Output", 0.3);

	float AutoMiddlePeg_Step4_Delay = Preferences::GetInstance()->GetFloat("AutoMiddlePeg::Step4_Delay", -10.0);
	if (AutoMiddlePeg_Step4_Delay == -10.0) Preferences::GetInstance()->PutDouble("AutoMiddlePeg::Step4_Delay", 1);

	float AutoMiddlePeg_Step5_MoveTimeout = Preferences::GetInstance()->GetFloat("AutoMiddlePeg::Step5_MoveTimeout", -1.0);
	if (AutoMiddlePeg_Step5_MoveTimeout == -1.0) Preferences::GetInstance()->PutFloat("AutoMiddlePeg::Step5_MoveTimeout", 2.0);

	float AutoMiddlePeg_Step5_Output = Preferences::GetInstance()->GetFloat("AutoMiddlePeg::Step5_Output", -10.0);
	if (AutoMiddlePeg_Step5_Output == -10.0) Preferences::GetInstance()->PutFloat("AutoMiddlePeg::Step5_Output", -0.3);

    // Parameters for auto3 - Right Peg
	float AutoRightPeg_Step1_MoveTimeout = Preferences::GetInstance()->GetFloat("AutoRightPeg::Step1_MoveTimeout", -1.0);
	if (AutoRightPeg_Step1_MoveTimeout == -1.0) Preferences::GetInstance()->PutFloat("AutoRightPeg::Step1_MoveTimeout", 2.075);

	float AutoRightPeg_Step1_Output = Preferences::GetInstance()->GetFloat("AutoRightPeg::Step1_Output", -10.0);
	if (AutoRightPeg_Step1_Output == -10.0) Preferences::GetInstance()->PutFloat("AutoRightPeg::Step1_Output", 0.6);

	float AutoRightPeg_Step2_Rotate = Preferences::GetInstance()->GetFloat("AutoRightPeg::Step2_Rotate", -500.0);
	if (AutoRightPeg_Step2_Rotate == -500.0) Preferences::GetInstance()->PutFloat("AutoRightPeg::Step2_Rotate", -56.0);

	float AutoRightPeg_Step3_MoveTimeout = Preferences::GetInstance()->GetFloat("AutoRightPeg::Step3_MoveTimeout", -1.0);
	if (AutoRightPeg_Step3_MoveTimeout == -1.0) Preferences::GetInstance()->PutFloat("AutoRightPeg::Step3_MoveTimeout", 1.25);

	float AutoRightPeg_Step3_Output = Preferences::GetInstance()->GetFloat("AutoRightPeg::Step3_Output", -10.0);
	if (AutoRightPeg_Step3_Output == -10.0) Preferences::GetInstance()->PutFloat("AutoRightPeg::Step3_Output", 0.6);

	double AutoRightPeg_Step5_Delay = Preferences::GetInstance()->GetDouble("AutoRightPeg::Step5_Delay", -500.0);
	if (AutoRightPeg_Step5_Delay == -500.0) Preferences::GetInstance()->PutDouble("AutoRightPeg::Step5_Delay", 0.5);

	float AutoRightPeg_Step6_MoveTimeout = Preferences::GetInstance()->GetFloat("AutoRightPeg::Step6_MoveTimeout", -1.0);
	if (AutoRightPeg_Step6_MoveTimeout == -1.0) Preferences::GetInstance()->PutFloat("AutoRightPeg::Step6_MoveTimeout", 2.0);

	float AutoRightPeg_Step6_Output = Preferences::GetInstance()->GetFloat("AutoRightPeg::Step6_Output", -500.0);
	if (AutoRightPeg_Step6_Output == -500.0) Preferences::GetInstance()->PutFloat("AutoRightPeg::Step6_Output", -0.3);

	// Parameters for MoveForward
	float AutoForward_Step1_MoveTimeout = Preferences::GetInstance()->GetFloat("AutoForward::Step1_MoveTimeout", -1.0);
	if (AutoForward_Step1_MoveTimeout == -1.0) Preferences::GetInstance()->PutFloat("AutoForward::Step1_MoveTimeout", 3.0);

	float AutoForward_Step1_Output = Preferences::GetInstance()->GetFloat("AutoForward::Step1_Output", -500.0);
	if (AutoForward_Step1_Output == -500.0) Preferences::GetInstance()->PutFloat("AutoForward::Step1_Output", 0.5);

	// Parameters for MoveForward w/sensor
	bool AutoMovePastLineSensor_Step1_GoForward = Preferences::GetInstance()->GetBoolean("AutoMovePastLineSensor::Step1_GoForward", false);
	if (AutoMovePastLineSensor_Step1_GoForward == true) Preferences::GetInstance()->PutBoolean("AutoMovePastLineSensor::Step1_GoForward", true);

	double AutoMovePastLineSensor_Step1_DistCM = Preferences::GetInstance()->GetDouble("AutoMovePastLineSensor::Step5_Delay", -500.0);
	if (AutoMovePastLineSensor_Step1_DistCM == -500.0) Preferences::GetInstance()->PutDouble("AutoMovePastLineSensor::Step1_DistCM", 230.0);

	double AutoMovePastLineSensor_Step1_TimeOut = Preferences::GetInstance()->GetDouble("AutoMovePastLineSensor::Step1_TimeOut", -500.0);
	if (AutoMovePastLineSensor_Step1_TimeOut == -500.0) Preferences::GetInstance()->PutDouble("AutoMovePastLineSensor::Step1_TimeOut", 5.0);


	double now = GetTime();
	std::cout << "4329_LOG:" << now << ":Configure Init" << std::endl;
}

