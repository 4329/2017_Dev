// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "Robot.h"

#include <thread>

#include "profiles.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<DriveTrain> Robot::driveTrain;
std::shared_ptr<Transmission> Robot::transmission;
std::unique_ptr<OI> Robot::oi;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
std::shared_ptr<Intake> Robot::intake;
std::shared_ptr<GearHolder> Robot::gearholder;
std::shared_ptr<Shooter> Robot::shooter;
std::shared_ptr<ConveyorBelt> Robot::conveyorBelt;
std::shared_ptr<ShooterPixy> Robot::shooterPixy;
std::shared_ptr<GearPixy> Robot::gearPixy;
std::shared_ptr<Climber> Robot::climb;
std::shared_ptr<ShooterIndex> Robot::shooterIndex;
std::shared_ptr<Video> Robot::video;
std::shared_ptr<AHRS> Robot::imu;

cameraControl Robot::cc;

void VideoT()
{
	Robot::video->Run();
}

void Robot::RobotInit() {
	std::cout << "robot init start" << std::endl;

	RobotMap::init();

	imu.reset(new AHRS(frc::SPI::Port::kMXP));
	shooterIndex.reset(new ShooterIndex());
	climb.reset(new Climber());
	intake.reset(new Intake());
	gearholder.reset(new GearHolder());
	shooter.reset(new Shooter());
	conveyorBelt.reset(new ConveyorBelt());
	shooterPixy.reset(new ShooterPixy());
	gearPixy.reset(new GearPixy());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    driveTrain.reset(new DriveTrain());
    transmission.reset(new Transmission());
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi.reset(new OI());

	// instantiate the command used for the autonomous period
	chooser.reset(new frc::SendableChooser<Command*>());
	chooser->AddDefault(std::string("0) Auto Move past line by sensor."), new AutoSimple());
	chooser->AddObject(std::string("1) Stand Still."), new Auto1());
	chooser->AddObject(std::string("2) Auto Move past line by timeout."), new MoveStraight_By_Timeout());
	frc::SmartDashboard::PutData("Autonomous Modes", chooser.get());

	video.reset(new Video());	//must be called before the thread
	cc.SelectedCamera = 1;
	cc.changeCount = 0;
	video->SetCC(&cc);
	video->Init();

	std::thread visionThread(VideoT);
	visionThread.detach();

	//add motion profiles here
	//Robot::driveTrain->AddMotionProfile(k3ftMotionProfileNdx, 1, k3ftMotionProfile, k3ftMotionProfileSz, k3ftMotionProfile, k3ftMotionProfileSz);

	std::cout << "robot init complete" << std::endl;
  }

/**
 * This function is called when the disabled button is hit.
 * You can use it to reset subsystems before shutting down.
 */
void Robot::DisabledInit(){

}

void Robot::DisabledPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::AutonomousInit() {
	autonomous.reset(chooser->GetSelected());
	if (autonomous.get() != nullptr)
		autonomous->Start();
}

void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to
	// continue until interrupted by another command, remove
	// these lines or comment it out.
	if (autonomous.get() != nullptr)
		autonomous->Cancel();
}

void Robot::TeleopPeriodic() {
	Scheduler::GetInstance()->Run();
}

void Robot::TestPeriodic() {
	lw->Run();
}

START_ROBOT_CLASS(Robot);

