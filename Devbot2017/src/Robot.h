// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef _ROBOT_H
#define _ROBOT_H

#include "WPILib.h"
#include "Commands/Command.h"
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"

#include "mindsensors.h"
#include "CANLight.h"
using mindsensors::CANLight;

#include "Config.h"

#include "Commands/AutoForward.h"
#include "Commands/AutoSimple.h"
#include "Commands/Auto1.h"
#include "Commands/Auto2.h"
#include "Commands/Auto3.h"
#include "Commands/MoveStraight_By_Timeout.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "Subsystems/DriveTrain.h"
#include "Subsystems/Transmission.h"

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "OI.h"
#include "Subsystems/Video.h"
#include "Subsystems/Intake.h"
#include "Subsystems/GearHolder.h"
#include "Subsystems/FloorGear.h"
#include "Subsystems/Shooter.h"
#include "Subsystems/ConveyorBelt.h"
#include "Subsystems/ShooterPixy.h"
#include "Subsystems/GearPixy.h"
#include "Subsystems/Climber.h"
#include "Subsystems/ShooterIndex.h"
#include <iostream>
#include "AHRS.h"

//function to set up the camera
void VideoT();

class Robot : public IterativeRobot {
public:
	static std::shared_ptr<Config> config;

	std::unique_ptr<Command> autonomous;
	std::shared_ptr<SendableChooser<Command*>> chooser;
	static std::unique_ptr<OI> oi;
	LiveWindow *lw = LiveWindow::GetInstance();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    static std::shared_ptr<DriveTrain> driveTrain;
    static std::shared_ptr<Transmission> transmission;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    static std::shared_ptr<Intake> intake;
    static std::shared_ptr<GearHolder> gearholder;
    static std::shared_ptr<FloorGear> floorGear;
    static std::shared_ptr<Shooter> shooter;
    static std::shared_ptr<ConveyorBelt> conveyorBelt;
    static std::shared_ptr<Climber> climb;
    static std::shared_ptr<ShooterIndex> shooterIndex;
    static std::shared_ptr<Video> video;
    static std::shared_ptr<AHRS> imu;

    static std::shared_ptr<ShooterPixy> shooterPixy;
    static std::shared_ptr<GearPixy> gearPixy;

    static cameraControl cc;

    CANLight *frameLights;
    DriverStation *ds;

 	virtual void RobotInit();
	virtual void DisabledInit();
	virtual void DisabledPeriodic();
	virtual void AutonomousInit();
	virtual void AutonomousPeriodic();
	virtual void TeleopInit();
	virtual void TeleopPeriodic();
	virtual void TestPeriodic();

	//for the lights

    //Register set for when robot is disabled
    void inactivefade();

    //Register set performed once when robot is disabled from red alliance
    void disableseqred();

    //Register set performed once when robot is disabled from blue alliance
    void disableseqblue();

};

#endif
