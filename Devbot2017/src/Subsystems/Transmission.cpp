// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Transmission.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Transmission::Transmission() : Subsystem("Transmission") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	shifterSolenoid1 = RobotMap::transmissionShifterSolenoid1;
	shifterSolenoid2 = RobotMap::transmissionShifterSolenoid2;
}

void Transmission::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Transmission::Configuration() {
	// WRITE CONFIG STUFF HERE
}

//possibly have value in configuration that says what is low and what is high - low is forward, high is backwards, or vice versa, etc.
void Transmission::ToggleSHIFTER() {
	if (shifterSolenoid1->Get() == DoubleSolenoid::kForward) {
		shifterSolenoid1->Set(DoubleSolenoid::kForward);
		shifterSolenoid2->Set(DoubleSolenoid::kReverse);
	}
	else {
		shifterSolenoid1->Set(DoubleSolenoid::kReverse);
		shifterSolenoid2->Set(DoubleSolenoid::kReverse);
	}

}


